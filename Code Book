The run_analysis.R script performs the necessary steps in filtering out the means and standard deviations from the executed measurements on human activity recognition using smartphones

1. The data set must be downloaded which includes the training data and test data.

2. The script sets the working directory in the location of the downloaded data set.

3. The script assigns variables to each of the collected data:

Features <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","Functions"))
%The features for this database were from the accelerometer and gyroscope 3-axial raw signals tAcc-XYZ and tGyro-XYZ.%

Activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("Code", "Activity"))
%The six activities that were performed were "WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING" and "LAYING" which are in character form but must be factors.%

Subject_Test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "Subject")
%This contains 30% of the volunteer subjects which were observed.% 

x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = Features$Functions)
%This has the recorded features test data.% 

y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "Code")
%This has the test data of activities' code labels.%

Subject_Train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "Subject")
%This contains the other 70% of the volunteer subjects which were observed.%

x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = Features$Functions)
%This has the recorded features training data.%

y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "Code")
%This has the training data of activities' code labels.%

4. We assign the activities to be factors instead of characters.
Activities$Activity <- as.factor(Activities$Activity)

5. The script merges the test and training data sets into one data.
X <- rbind(x_train, x_test) %The rbind() function combines x_train and x_test.%
Y <- rbind(y_train, y_test) %The rbind() function combines y_train and y_test.%
Subject <- rbind(Subject_Train, Subject_Test) %The rbind() function combines the Subject_Train and Subject_Test.%
Merged_Data <- cbind(Subject, Y, X) %The Merged_Data combines X, Y and Subject through the cbind() function.

6. The script collects the means and standard deviations of the data alone.
TidyData <- Merged_Data %>% select(Subject, Code, contains("mean"), contains("std"))

7. The script replaces the code names from the activities into their descriptive form which are "WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING" and "LAYING"
names(TidyData)[2] = "Activity"
TidyData$Code <- Activities[TidyData$Code, 2] %This line of code replaces the Code column with their corresponding variables.%

8. The script now replaces the vague variable names into more descriptive and easier to understand variables.
names(TidyData)<-gsub("Acc", "Accelerometer", names(TidyData)) %This replaces "Acc" with "Accelerometer".%
names(TidyData)<-gsub("Gyro", "Gyroscope", names(TidyData)) %This replaces "Gyro" with "Gyroscope".%
names(TidyData)<-gsub("BodyBody", "Body", names(TidyData)) %This replaces "BodyBody" with "Body".%
names(TidyData)<-gsub("Mag", "Magnitude", names(TidyData)) %This replaces "Mag" with "Magnitude".%
names(TidyData)<-gsub("^t", "Time", names(TidyData)) %This replaces "^t" with "Time".%
names(TidyData)<-gsub("^f", "Frequency", names(TidyData)) %This replaces "^f" with "Frequency".%
names(TidyData)<-gsub("tBody", "TimeBody", names(TidyData)) %This replaces "tBody" with "TimeBody".%
names(TidyData)<-gsub("-mean()", "Mean", names(TidyData), ignore.case = TRUE) %This replaces "-mean()" with "Mean".%
names(TidyData)<-gsub("-std()", "STD", names(TidyData), ignore.case = TRUE) %This replaces "-std" with "STD".%
names(TidyData)<-gsub("-freq()", "Frequency", names(TidyData), ignore.case = TRUE) %This replaces "-freq()" with "Frequency".%
names(TidyData)<-gsub("angle", "Angle", names(TidyData)) %This replaces "angle" with "Angle".%
names(TidyData)<-gsub("gravity", "Gravity", names(TidyData)) %This replaces "gravity" with "Gravity".%

9. The script creates a wholly independent data set containing the cleaned up data.
EzData <- TidyData %>%
  group_by(Subject, Activity) %>%
  summarise_all(list(mean)) %This summarizes the TidyData data set by taking the means of each variable for each activity and each subject grouped by their subject and activity.%
write.table(FinalData, "EzData.txt", row.name=FALSE) %The script takes the EzData into a .txt file.%
